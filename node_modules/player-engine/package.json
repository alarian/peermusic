{
  "name": "player-engine",
  "version": "0.2.0",
  "description": "A simple music player engine.",
  "main": "index.js",
  "scripts": {
    "test": "standard"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/peermusic/player-engine.git"
  },
  "keywords": [
    "music",
    "player",
    "HTML5"
  ],
  "author": {
    "name": "https://github.com/peermusic/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/peermusic/player-engine/issues"
  },
  "homepage": "https://github.com/peermusic/player-engine#readme",
  "dependencies": {
    "file-system": "git+https://github.com/peermusic/file-system.git",
    "inherits": "~2.0",
    "events": "~1.1"
  },
  "gitHead": "01651ee6c5df3f75c4fce66e744a85d6d16ac027",
  "readme": "# player-engine\n\nA simple music player engine.\n\n## Install\n\n```sh\nnpm install https://github.com/peermusic/player-engine\n```\n\n```js\nvar engine = require('player-engine')\n```\n\nFor reference see the [Browserify Handbook](https://github.com/substack/browserify-handbook#how-node_modules-works).\n\n## Demo\n\n```sh\nnpm install -g wzrd\ncd example\nwzrd index.js:bundle.js\n```\n\n**Note:** If no local webserver (eg. wzrd) is used Chrome has to be started with the `--allow-file-access-from-files` flag.\n\n## Usage\n\n```js\nvar engine = require('player-engine')\n\n// Triggers when the \"playing\" state changes\nengine.on('playingState', function (playing) {\n    // \"playing\" is true/false\n})\n\n// Triggers when the possibility of going \"back\" changes\nengine.on('backState', function (back_possible) {\n    // \"back_possible\" is true/false\n})\n\n// Triggers when the song changes\nengine.on('songState', function (song) {\n    // \"song\" is an object with \"name\", \"duration\" and \"index\" of the currently played song\n})\n\n// Triggers during playing the track\nengine.on('progress', function (progress) {\n    // \"progress\" is a float with the current time (in seconds)\n})\n\n// Overwrite the internal files with files you want the engine to play\n// Call this when you are done with adding event listeners\nengine.setFiles(files)\n\n// Return the URL of the current track when the player is active else return \"false\"\nengine.playing()\n\n// Toggles the state of the player to playing/pause corresponding to the current state\nengine.toggle()\n\n// Set the track to be instantly played by index of the internal files\nengine.setTrack(index)\n\n// Queue a track to play later by index of the internal files\nengine.queueTrack(index)\n\n// Remove a track from the queue\nengine.unqueueTrack(index)\n\n// Get all queued tracks\nengine.getQueuedTracks()\n\n// Remove a track from the internal file list\nengine.removeTrack(index)\n\n// Get the internal file list\nengine.getTracks()\n\n// Start the audio playback\nengine.play()\n\n// Stop the audio playback, an resets to the beginning of the track\nengine.stop()\n\n// Pauses the audio playback, can be resumed from the current state\nengine.pause()\n\n// Plays the last song\nengine.back()\n\n// Plays the next song (either in history, queue or random)\nengine.next()\n\n// Sets volume to the given volume, if volume is empty act as get function\nengine.volume(volume)\n\n// Sets the playback position\nengine.seek(time)\n```\n",
  "readmeFilename": "README.md",
  "_id": "player-engine@0.2.0",
  "_shasum": "409190a1ee08933e2711375c6551aa37c1f74f00",
  "_from": "git+https://github.com/peermusic/player-engine.git",
  "_resolved": "git+https://github.com/peermusic/player-engine.git#01651ee6c5df3f75c4fce66e744a85d6d16ac027"
}
